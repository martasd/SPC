/*****************************************************************************
 * file:        README
 * authors:     Sam Rebelsky, Martin Dluhos
 * created:     October 7, 2011
 * revised:     December 14, 2011
 * description: Documentation for a Simple Pascal Compiler
 ****************************************************************************/

SPC: A simple compiler for Pascal that can build and print out a parse tree,
perform type checking, and generate code in a general assembly language.

print-tree: Prints a parse tree of a simple Pascal program and reports if
incompatible types are used in expressions.

pi: A Simple Pascal Interpreter which generates STAC and runs it.

*****************************************************************************
STAC (A Simple Three Address Code)

A very simple "high-level" assembly code, intended for use in a compilers
class (preferably a class that uses C as its main instruction set).  

Implements an architecture with separate data and code spaces.

Note: Some instructions are currently unimplemented, particularly the
character and string instructions.


+---------------+-----------------------------------------------------
| Memory Layout |
+---------------+

  +-----------+
  |   Stack   |
  |     |     |
  |     |     | %bp - the frame pointer
  |     v     | %sp - the stack pointer
  |           |
  |           |
  |     ^     | %hp - the heap pointer
  |     |     |
  |   Heap    |
  +-----------+
  |  Globals  | You get to allocate these yourself
  +-----------+


+------------+--------------------------------------------------------
| Parameters |
+------------+

What can you give as parameter to instructions?

Registers
* %bp - base of the current stack frame
* %sp - end of the stack
* %hp - end of the heap
* %r0 - general purpose register
* %ic - instruction counter

Memory
* REG(INTEGER) - e.g., %bp(-8), contents of that memory location
* $INTEGER - e.g., $1000, absolute location

Labels
* Given by name
* Declared by _LABEL NAME

Constants
* [digits]+ - integer constant
* [digits]+.digits[+] - real constant
* "([^"]|\")*" - string constant
* 'char' - character constant


+--------------+------------------------------------------------------
| Instructions |
+--------------+

Variable declaration (global variables)
* .INTEGER NAME
* .REAL NAME
* .CHAR NAME
* .STRING NAME

Labels
* .LABEL NAME

Control
* JMP VAR
  * Var can be anything above: Label, Integer constant, Integer stored
    on the stack, etc.
* JEQ TARGET LEFT RIGHT 
* JNE TARGET LEFT RIGHT 
* JGT TARGET LEFT RIGHT 
* JLE TARGET LEFT RIGHT 

Data Movement
* IMOV TARGET, SOURCE
* FMOV TARGET, SOURCE
  
Arithmetic
  All arithmetic operations have the form
  * Character indicating type (integer or real)
  * Operation (ADD, SUB, MUL, DIV, ...)
  * Location for result
  * Location for left parameter
  * Location for right parameter

* IADD RESULT LEFT RIGHT
* ISUB RESULT LEFT RIGHT
* IMUL RESULT LEFT RIGHT
* IDIV RESULT LEFT RIGHT
* IMOD RESULT LEFT RIGHT
* FADD RESULT LEFT RIGHT
* FSUB RESULT LEFT RIGHT
* FMUL RESULT LEFT RIGHT
* FDIV RESULT LEFT RIGHT

Type conversion
* I2R IRESULT RVAR
* R2I RRESULT IVAR

Input and Output
* IREAD TARGET - Read an integer and store it in TARGET
* IWRITE VAR - Write the integer stored in VAR
* FREAD TARGET
* FWRITE VAR
* SREAD TARGET
* SWRITE VAR
* CREAD TARGET
* CWRITE VAR
* WRITELN - add a newline

Miscellaneous
* NOOP - Do nothing.
